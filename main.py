import os
import json
import logging
from datetime import datetime
from telegram import Bot
from telegram.ext import Application, CommandHandler
from openai import OpenAI

from dotenv import load_dotenv
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

HISTORY_FILE = "news_history.json"

PROMPT_TEMPLATE = """
–©–æ–¥–Ω—è –Ω–∞–¥–∞–≤–∞–π –º–µ–Ω—ñ –∫–æ—Ä–æ—Ç–∫—É, —Å—Ç–∏—Å–ª—É —Å–≤–æ–¥–∫—É –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏—Ö –Ω–æ–≤–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É.
–ú–µ–Ω–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç–µ–º–∏:
- –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó
- —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó (AI, hardware, –≤–µ–ª–∏–∫—ñ –∫–æ–º–ø–∞–Ω—ñ—ó)
- –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, Frontend (React, Next.js, JavaScript)
- —Å—Ç–∏—Ö—ñ–π–Ω—ñ –ª–∏—Ö–∞, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏
- –≥–æ–ª–æ–≤–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞ —Å–≤—ñ—Ç—É

–£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä—ñ–≤. –í—Ä–∞—Ö–æ–≤—É–π —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–≤–µ–¥–µ–Ω—å. –í–∏–¥–∞–≤–∞–π —Ç—ñ–ª—å–∫–∏ –Ω–∞–π—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—à–µ, —É —Ñ–æ—Ä–º–∞—Ç—ñ:

1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–∏–Ω–∏ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å
2. ...

–Ø–∫—â–æ —î —â–æ—Å—å –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–µ ‚Äî –ø–æ–∑–Ω–∞—á **[–≤–∞–∂–ª–∏–≤–æ]**.
"""

# --- Load news history ---
def load_history():
    if not os.path.exists(HISTORY_FILE):
        return []
    with open(HISTORY_FILE, "r") as f:
        return json.load(f)

# --- Save history ---
def save_history(news_list):
    with open(HISTORY_FILE, "w") as f:
        json.dump(news_list, f)

# --- Generate news summary ---
def get_news_summary():
    history = load_history()
    prompt = PROMPT_TEMPLATE + f"\n–û—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –Ω–æ–≤–∏–Ω–∏: {history[-5:]}"

    response = client.chat.completions.create(
        model="gpt-4-0125-preview",
        messages=[
            {"role": "system", "content": "–¢–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫ –Ω–æ–≤–∏–Ω."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=800,
        temperature=0.7
    )

    news = response.choices[0].message.content.strip()
    history.append({"date": datetime.now().isoformat(), "news": news})
    save_history(history)
    return news

# --- Telegram send function ---
def send_news(context=None):
    bot = Bot(token=TELEGRAM_TOKEN)
    try:
        bot.send_message(chat_id=CHAT_ID, text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞ –Ω–æ–≤–∏–Ω –∑–∞–ø—É—â–µ–Ω–∞‚Ä¶")
        news = get_news_summary()
        bot.send_message(chat_id=CHAT_ID, text=news)
        bot.send_message(chat_id=CHAT_ID, text="‚úÖ –ì–æ—Ç–æ–≤–æ!")
    except Exception as e:
        bot.send_message(chat_id=CHAT_ID, text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏:\n{str(e)}")

# --- For manual command (optional) ---
async def news_command(update, context):
    print("/news command received")
    news = get_news_summary()
    await update.message.reply_text(news)

# --- Main bot loop (for deployment) ---
def main():
    logging.basicConfig(level=logging.INFO)
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("news", news_command))

    bot = Bot(token=TELEGRAM_TOKEN)
    bot.send_message(chat_id=CHAT_ID, text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")

    application.run_polling()

if __name__ == "__main__":
    main()